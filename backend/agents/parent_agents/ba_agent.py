from backend.agents.base_agent import BaseAgent
from backend.config.logger import logger


class BAAgent(BaseAgent):

    def __init__(
        self,
        model_name,
        temperature,
        max_tokens,
    ):
        state = self.redis_client.get_shared_state(self.shared_state_key)
        dev_msg = """
            You are a Business Analyst Agent tasked with generating 
            detailed and actionable requirements for a Developer Agent.\n
            The Developer Agent will use these requirements to write code for a project.
            """
        user_msg = f"""
            The user inputs are as follows:\n
            {state.get("InputAgent", "")}\n\n
            Based on the inputs and requirements given by the user, 
            generate detailed requirements for the Developer Agent in the following format:\n
            **Project Overview**:\n
            [Provide a brief description of the project, e.g., 
            "A web application where users can upload images of food, 
            and the app predicts the calorie content."]\n\n

            **Key Information**:\n
            - The app should be developed using [list technologies, 
            e.g., ReactJS for frontend, FastAPI for backend].\n
            - The app must have [specific features, e.g., a user 
            authentication system, image upload functionality, 
            calorie prediction feature using OpenAI GPT-3.5].\n\n

            **Your Task**:\n
            Generate detailed requirements for the Developer Agent. Include:\n
            1. A breakdown of features or functionality the app should have.\n
            2. User stories or scenarios that the Developer should implement.\n
            3. Any APIs, data models, or libraries the Developer should use.\n
            4. Specific inputs and expected outputs for each feature.\n

            **Output Format**:\n
            - Use numbered or bullet points for each requirement.\n
            - Group requirements by features or modules 
            (e.g., "Frontend," "Backend," "Database").\n
            - Specify technologies, if applicable.\n

            Example Output Format:\n
            - **Feature Name**: [e.g., User Authentication]\n
            - Description: [What the feature does]\n
            - Input: [Details of inputs, e.g., "Username, Password"]\n
            - Output: [Details of outputs, e.g., "JWT token"]\n
            - Notes: [Any additional notes]\n

            Please write clear, unambiguous, and complete requirements.\n
            The output will be directly used by the Developer Agent 
            for implementation.
            """
        super().__init__(
            model_name=model_name,
            temperature=temperature,
            dev_msg=dev_msg,
            user_msg=user_msg,
            max_tokens=max_tokens,
        )
        self.agent_name = "BAAgent"
        self.shared_state_key = "ba_workflow"

    def process(self) -> str:
        """
        Generate code based on the requirements.

        Returns:
            str: The code generated by the LLM.
        """
        logger.info("Processing inputs for BA Agent...\n")
        response = self.llm.generate_response()
        logger.info(f"Response for {self.agent_name}: {response}")
        self.redis_client.save_to_shared_state(
            agent_name=self.agent_name,
            shared_state_key=self.shared_state_key,
            data=response,
        )
        return response
